#include<iostream>
using namespace std;
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
class node{
public:
    int data;
    node *prev;
    node *next;
    node(int data){
    this->data=data;
    this->next=NULL;
    }
};
void insert_at_beg(node* &tail,int data){
node *temp= new node(data);
temp->next=tail->next;
tail->next=temp;
}
void insert_at_end(node* &tail,int data){
node *temp=new node(data);
if(tail==NULL){
    temp->next=temp;
    tail=temp;
}
temp->next=tail->next;
tail->next=temp;
tail=temp;
}
void insert_at_position(node* &tail,int pos,int data){
node *temp=new node(data);
int position=1;
if(position==pos){
    insert_at_beg(tail,data);
    return;
}
node *curr=tail->next;
while(position<pos-1){
    curr=curr->next;
    position++;
}
if(curr->next==tail->next){
    insert_at_end(tail,data);
    return;
}
else{
    temp->next=curr->next;
    curr->next=temp;
}
}
void del_beg(node* &tail){
node *temp=tail->next;
//edgecase: if it has only one node
if(temp==tail){
    free(temp);
    temp=NULL;
}
else{
    tail->next=temp->next;
    free(temp);
    temp=NULL;
}
}
void del_end(node* &tail){
node *temp=tail->next;
while(temp->next!=tail){
    temp=temp->next;
}
//edgecase: if it has only one node
if(temp==tail){
    free(temp);
    temp=NULL;
}
else{
temp->next=tail->next;
free(tail);
tail=temp;
}
}
void del_position(node* &tail,int pos){
node *temp=tail->next;
int position=1;
while(position<pos-1){
    temp=temp->next;
    position++;
}
//edgecase: node position in 1
if(position==pos){
   del_beg(tail);
    return;
}
//edgecase: if it has only one node
else if(temp==tail){
    free(temp);
    temp=NULL;
    return;
}
else{
    node *temp2=temp->next;
    temp->next=temp2->next;
    if(temp2==tail){
        tail=temp;
    }
    free(temp2);
    temp2=NULL;
}
}
void print(node* &tail){
node *temp=tail->next;
do{
    cout<<temp->data<<" ";
    temp=temp->next;
}while(temp!=tail->next);
cout<<endl;
}
int main(){
node *newnode=new node(10);
newnode->next=newnode;
node *tail=newnode;
print(tail);
insert_at_beg(tail,20);
print(tail);
insert_at_end(tail,30);
insert_at_end(tail,40);
print(tail);
insert_at_position(tail,3,50);
print(tail);
cout<<"After deletion:"<<endl;
del_beg(tail);
print(tail);
del_end(tail);
print(tail);
del_position(tail,1);
print(tail);
}
