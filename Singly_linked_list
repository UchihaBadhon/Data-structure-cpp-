#include<iostream>
using namespace std;
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
class node{
public:
    int data;
    node *next;
    node(int data){
    this->data=data;
    this->next=NULL;
    }
};
void insert_at_beg(node* &head,int d){//(node *head,int d): it will be copied but outside this function value will not be updated
node *temp=new node(d);               //node reference pointer initialization: (node* &head)

temp->next=head;
head=temp;
}
void insert_at_end(node* &tail,int d){
node *temp=new node(d);
tail->next=temp;
tail=temp;
}
void insert_at_position(node* &head,node* &tail,int pos,int d){
   //edge case if the position at the begining
    if(pos==1){
        insert_at_beg(head,d);
        return;
    }
node *temp=new node(d);
node *temp1=head;
for(int i=1;i<pos-1;i++){
    temp1=temp1->next;//traverse to find the positioned node
}
//edgecase if the position is at the end
if(temp1->next==NULL){
    insert_at_end(tail,d);
    return;
}
temp->next=temp1->next;//update the address of new node
temp1->next=temp;//connect the new node address at the fixed position node

}
void print(node *head){
node *temp=head;
while(temp!=NULL){
    cout<<temp->data<<" ";
    temp=temp->next;
}
cout<<endl;
}
int main(){
    optimize();
node *newnode= new node(10);
node *head=newnode;
node *tail=newnode;//to keep track of the last node
//insertion
insert_at_beg(head,20);
insert_at_end(tail,30);
insert_at_position(head,tail,4,40);
print(head);
cout<<"Head: "<<head->data<<endl;
cout<<"Tail: "<<tail->data<<endl;
//cout<<newnode->data<<" "<<newnode->next<<endl;
}
