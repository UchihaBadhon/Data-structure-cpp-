//some codes have been commented out due to circular linked list
#include<iostream>
using namespace std;
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
class node{
    public:
int data;
node *next;
node(int data){
this->data=data;
this->next=NULL;
}
};
/*void insert_node(node* &head,node* &tail,int data){
node *temp=new node(data);
temp->next=NULL;
node *temp2=head;
if(head->next==NULL){
    head->next=temp;
    tail=head->next;

    }
    else{
        while(temp2->next!=NULL){
            temp2=temp2->next;
        }
        temp2->next=temp;
        tail=temp2->next;
    }

}
*/
void insert_at_beg(node* &tail,int data){
node *temp= new node(data);
temp->next=tail->next;
tail->next=temp;
}
void insert_at_end(node* &tail,int data){
node *temp=new node(data);
if(tail==NULL){
    temp->next=temp;
    tail=temp;
}
temp->next=tail->next;
tail->next=temp;
tail=temp;
}
void insert_at_position(node* &tail,int pos,int data){
node *temp=new node(data);
int position=1;
if(position==pos){
    insert_at_beg(tail,data);
    return;
}
node *curr=tail->next;
while(position<pos-1){
    curr=curr->next;
    position++;
}
if(curr->next==tail->next){
    insert_at_end(tail,data);
    return;
}
else{
    temp->next=curr->next;
    curr->next=temp;
}
}
bool judge_circular(node *head){
if(head==NULL){
    return true;
}
else{
    node *temp=head->next;
while(temp!=NULL&&temp!=head){
    temp=temp->next;
}
if(temp==head){
    return true;
}
else if(temp==NULL){
    return false;
}
}
}
bool isCycle(node *head){
map<node*,bool>visited;
if(head==NULL){
    retun false;
}
node *temp=tail;
while(temp!=NULL){
    if(visited[temp]==true){
        return true;
    }

}

}
int main(){
node *newnode=new node(10);
newnode->next=newnode;
node *tail=newnode;
//print(tail);
insert_at_beg(tail,20);
//print(tail);
insert_at_end(tail,30);
insert_at_end(tail,40);
//print(tail);
insert_at_position(tail,3,50);
//print(tail);
bool value=judge_circular(tail);
bool val=isCycle(tail);
cout<<value<<endl;
}
