#include<iostream>
using namespace std;
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
class node{
    public:
int data;
node *next;
node(int data){
this->data=data;
this->next=NULL;
}
};
void insert_node(node* &head,node* &tail,int data){
node *temp=new node(data);
temp->next=NULL;
node *temp2=head;
if(head->next==NULL){
    head->next=temp;
    tail=head->next;

    }
    else{
        while(temp2->next!=NULL){
            temp2=temp2->next;
        }
        temp2->next=temp;
        tail=temp2->next;
    }

}

node* find_mid(node *head){

if(head==NULL||head->next==NULL){
    return head;
}
else if(head->next->next==NULL){
    return head->next;
}
else{
        node *fast=head->next,*slow=head;
        while(fast!=NULL){
    fast=fast->next;
    if(fast!=NULL){
           fast=fast->next;
    }
    slow=slow->next;
}
return slow;
}
}
node* kreverse(node* head,int k){
//base case
if(head==NULL){
    return NULL;
}
node *prev=NULL;
node *curr=head;
node *forwad=NULL;
int cnt=0;
while(curr!=NULL&&cnt<k){
    forwad=curr->next;
    curr->next=prev;
    prev=curr;
    curr=forwad;
cnt++;
}
if(forwad!=NULL){
    head->next=kreverse(forwad,k);
}
return prev;
}
void print(node *head){
    node *temp=head;
while(temp!=NULL){
    cout<<temp->data<<" ";
    temp=temp->next;
}
cout<<endl;
}
int main(){
node *newnode=new node(10);
node *head=newnode;
node *tail=newnode;
insert_node(head,tail,20);
insert_node(head,tail,30);
insert_node(head,tail,40);
insert_node(head,tail,50);
insert_node(head,tail,60);
print(head);
node *ans=find_mid(head);
cout<<ans->data<<endl;
//reverse linked list in k group
 head=kreverse(head,2);
print(head);
}

